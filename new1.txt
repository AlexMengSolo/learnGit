安装git后

初始化git
git config --global user.name "Alex"
git config --global user.email "mfanrui@126.com"


git 初始化操作
git init 命令将当前目录变成Git可以管理的仓库
创建成功后，当前目录下会多一个.git的目录，这个目录是git来跟踪管理版本库的

使用ls -ah命令可以查看目录下有那些文件

git add 把文件添加到仓库
git add readme.txt

git commit 把文件提交到仓库
git commit -m "备注"

git add <file>  可以反复多次使用，添加多个文件
git commit 会将所有add标记过的文件进行提交


版本回退
git log 命令可以查看我们所有的历史记录
git reset --hard HEAD^ 回到上个版本
git reset --hard HEAD^^ 回到上上个版本
往事到100个版本 ，写成HEAD~100
git reflog 用了记录你的每一次命令

工作区和暂存区

版本库Repository，
git中的暂存区的概念，我们对文件进行修改后，通过add命令将文件放入暂存区，
git为我们自动创建第一个分支master，以及指向master的一个指针叫做HEAD。

管理修改 	
每一次git commit到库中的代码都是add到缓存区的，如果没有先add到缓存区，那么无法
提交至代码库

放弃工作区中的代码，使用暂存区的代码来覆盖工作区，如果暂存区没有代码，
那么回将版本中的代码放回工作区


当前已经在本地创建了一个git仓库，又想在GirHub创建一个一个Git仓库，并且让这个两个仓库
进行远程同步，这样，GitHub上的仓库既可以做备份，有可以让其他人通过该仓库来协作，这是一举多得。
本地的Gig仓库和GitHub仓库之间的传输是通过SSH加密的，
为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是
别人冒充的，而Git支持SSH协议，所以GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。
GitHub允许你添加多个key，假定你又若干个电脑，一会在公司，一会在家，只要把每天电脑的
key都添加到GitHub，就可以在每台电脑上往GitHub推送了。

首先在GitHub上创建一个新库，
然后把本地仓库与之关联，然后把本地仓库的内容推送到GitHub仓库。
通过以下命令来实现
git remote add origin <gitHub中的仓库名称>
git push -u origin master
实际上把当前分支master推送到远程。由于远程是空的，第一次推送master分支时，加上-u参数，Git不但
会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master
分支关联起来，在以后推送活拉取是救可以简化命令。
以后，只要在本地提交了作业，就可以通过命令
git push origin master 
把本地master分支的最新修改推送至GitHub。

分布式版本系统的最大好处之一，是在本地工作完全不需要考虑远程库的存在，也就是在没有联网都
可以正常工作。当有网络的时候，再把本地提交推送到远端。